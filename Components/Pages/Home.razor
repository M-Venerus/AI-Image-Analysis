@page "/"
@using Azure;
@using Azure.AI.Vision;
@using Azure.AI.Vision.ImageAnalysis;
@using System;
@rendermode InteractiveServer
@inject ApiService ApiService

<PageTitle>Home</PageTitle>

<div class="home-page">
    <div class="main-content">
        <div class="big-text">
            <h1 class="name">Michael Venerus</h1>
            <span class="line"></span>
            <h1 class="title">AI-Powered Image Analysis and Image Generation</h1>
        </div>

        <p class="instructions">To analyze an image, paste the image's URL in the text area below and click 'Analyze Image'. Image generation capabilities not yet available, coming soon.</p>

        <textarea class="textbox"@bind="urlOrPrompt" rows="3" cols="50" placeholder="Enter an image URL to analyze."></textarea>
        <br>
        <div class="buttons">
            <button @onclick="AnalyzeImage">Analyze Image</button>
            <button @onclick="GenerateImage">Generate Image</button>
        </div>
        <div class=reset-button>
            <button @onclick="Reset">Reset</button>
        </div>

        <div class="analysis-result">
            <img src="@urlOrPrompt" alt="" class="image" onerror="this.onerror=null;this.src='images/blank.png';"/>
            <div class="analysis-text-container">
                <p class="text-caption">@caption</p>
            </div>
        </div>

    </div>
</div>

@code
{
    string urlOrPrompt = "";
    
    string caption = "";

    void Reset()
    {
        urlOrPrompt = string.Empty;
        caption = string.Empty;
    }

    void AnalyzeImage()
    {
        string key = ApiService.ApiKey ?? string.Empty;
        string endpoint = ApiService.EndpointUrl ?? string.Empty;

        ImageAnalysisClient client = new ImageAnalysisClient(
            new Uri(endpoint),
            new AzureKeyCredential(key));

        // Check if urlOrPrompt is not empty and is a valid Uri
        if (Uri.TryCreate(urlOrPrompt, UriKind.Absolute, out var imageUri))
        {
            ImageAnalysisResult result = client.Analyze(
                new Uri(urlOrPrompt),
                VisualFeatures.Caption | VisualFeatures.Read,
                new ImageAnalysisOptions { GenderNeutralCaption = true });
        
            Console.WriteLine("Image analysis results:");
            Console.WriteLine(" Caption:");
            Console.WriteLine($"   '{result.Caption.Text}', Confidence {result.Caption.Confidence:F4}");

            if (result.Caption != null) 
            {
                caption = result.Caption.Text;
            }

            Console.WriteLine(" Read:");
            foreach (DetectedTextBlock block in result.Read.Blocks)
                foreach (DetectedTextLine line in block.Lines)
                {
                    Console.WriteLine($"   Line: '{line.Text}', Bounding Polygon: [{string.Join(" ", line.BoundingPolygon)}]");
                    foreach (DetectedTextWord word in line.Words)
                    {
                        Console.WriteLine($"     Word: '{word.Text}', Confidence {word.Confidence.ToString("#.####")}, Bounding Polygon: [{string.Join(" ", word.BoundingPolygon)}]");
                    }
                }
        }
        else
        {
            caption = "Invalid URL or Prompt";
        }
    }
    void Main()
    {
        try
        {
            AnalyzeImage();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    void GenerateImage()
    {
        // Call the AI-powered image generation service
    }
}
